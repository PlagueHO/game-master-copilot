@using GMCopilot.Services
@using GMCopilot.Data.Repositories
@using GMCopilot.Entities.Models
@using System.Text.Json

@inject SemanticKernelService semanticKernelService
@inject UniverseRepository universeRepository
@inject NavigationManager navigationManager

<MudCard Outlined="true">
    <MudCardContent>
        <MudCardHeader>
            Generate a Universe
        </MudCardHeader>
        <MudText>
            Enter a few details about the universe you would like to generate. You can be as specific as you like, or leave it to chance.
        </MudText>
        <MudTextField @bind-Value="@UniverseDetails" Variant="Variant.Outlined" Margin="Margin.Dense" />
        <MudButton OnClick="@GenerateUniverse" Color="Color.Dark" Margin="Margin.Is2.FromTop" Disabled="@(loadingVisible)">
            Generate <MudIcon Icon="@Icons.Material.Filled.ArrowRight" />
        </MudButton>
    </MudCardContent>
</MudCard>

 @if (Universe != null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" >
        <MudCardContent>
            <MudTextField @bind-Value="@Universe.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudTextField @bind-Value="@Universe.Description" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudButton OnClick="@SaveUniverse" Color="Color.Dark" Margin="Margin.Is2.FromTop" Disabled="@(loadingVisible)">
                Save <MudIcon Icon="@Icons.Material.Filled.Save" />
            </MudButton>
        </MudCardContent>
    </MudProgressCircular>
}

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    [Parameter]
    public string UniverseId { get; set; }

    Universe? Universe;
    String UniverseDetails { get; set; } = "A fantasy universe.";
    Boolean loadingVisible { get; set; } = false;

    protected override async void OnParametersSet()
    {
        if (Tenant != null && Account != null)
        {
            if (navigationManager.Uri.EndsWith("/universe/new"))
                Universe = new Universe(Guid.NewGuid().ToString(), Tenant.Id, "New Universe", "A new universe!");
            else if (UniverseId != null)
                Universe = await universeRepository.FindByUniverseIdAsync(UniverseId, Tenant.Id);
        }
    }

    private async Task GenerateUniverse()
    {
        loadingVisible = true;

        loadingVisible = false;
    }

    private async Task SaveUniverse()
    {
        if (UniverseId == null)
            await universeRepository.CreateAsync(Universe);
        else
            await universeRepository.UpsertAsync(Universe);

        navigationManager.NavigateTo("/universe");
    }
}
