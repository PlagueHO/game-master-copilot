@using GMCopilot.Services
@using GMCopilot.Entities.Models
@using GMCopilot.Data.Repositories

@inject UniverseRepository universeRepository
@inject NavigationManager navigationManager

<Card Background="Background.Primary" WhiteText>
    <CardBody>
        <CardTitle Size="3">
            Your Universes
        </CardTitle>
        <CardText>
            Select one of the existing universes or create a new one by clicking Create. Generating a new universe can take a few seconds and requires just a few words of input.
        </CardText>
        <CardActions>
            <Button Color="Color.Dark" Type="ButtonType.Link" @onclick="CreateButtonClick" Margin="Margin.Is2.FromTop">
                Create <Icon Name="IconName.Add" />
            </Button>
            <Button Color="Color.Dark" Type="ButtonType.Link" Margin="Margin.Is2.FromTop">
                Delete Selected <Icon Name="IconName.Delete" />
            </Button>
        </CardActions>
    </CardBody>
</Card>

<LoadingIndicator @bind-Visible="@loadingVisible">
    <Table Striped Hoverable Bordered>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Select</TableHeaderCell>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Description</TableHeaderCell>
            </TableRow>
        </TableHeader>
        @if (universes != null)
        {
            <TableBody>
                @foreach (var universe in universes)
                {
                    <TableRow @key="@universe.Id">
                        <TableRowHeader><Check TValue="bool"/></TableRowHeader>
                        <TableRowCell @onclick="(e) => UniverseClick(e, universe)">@universe.Name</TableRowCell>
                        <TableRowCell @onclick="(e) => UniverseClick(e, universe)">@universe.Description</TableRowCell>
                    </TableRow>
                }
            </TableBody>
        }
    </Table>
</LoadingIndicator>

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    private bool loadingVisible = true;
    private IEnumerable<Universe>? universes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUniverses();
    }

    private async Task LoadUniverses()
    {
        if (Tenant != null)
        {
            universes = await universeRepository.FindByTenantIdAsync(Tenant.Id);
            loadingVisible = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void UniverseClick(MouseEventArgs e, Universe universe)
    {
        navigationManager.NavigateTo($"/universe/{universe.Id}");
    }

    private async void CreateButtonClick()
    {
        navigationManager.NavigateTo("/universe/new");
    }
}
