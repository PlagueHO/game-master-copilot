@page "/character/{CharacterId?}"

@using DMCopilot.Shared.Services
@using DMCopilot.Entities.Models
@using DMCopilot.Data.Repositories

@inject ISemanticKernelService semanticKernelService
@inject CharacterRepository characterRepository

<h4>Character</h4>

@if (CharacterId != null && _character == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group d-flex">
        <label for="_characterDetails">Character Details</label>
        <input type="text" @bind="@_characterDetails" @oninput="@((e) => { _characterDetails=(string)e.Value;})" class="form-control" id="_characterDetails" placeholder="A hill dwarf merchant who runs a general store in Baldurs Gate.">
        <Button Color="Color.Primary">Create</Button>
    </div>
}

@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    [CascadingParameter]
    public Tenant? Tenant { get; set; }

    [Parameter]
    public string? CharacterId { get; set; }

    private Character _character;
    private string _characterDetails { get; set; } = "A hill dwarf merchant who runs a general store in Baldurs Gate.";

    protected override async void OnParametersSet()
    {
        if (Tenant != null)
        {
            if (CharacterId == null)
                _character = new Character(Guid.NewGuid().ToString());
            else
                _character = await characterRepository.GetCharacterAsync(CharacterId);
        }
    }

    private async Task CreateCharacter()
    {
        // Call the semanticKernelService with the character details
        var result = await semanticKernelService.InvokePluginFunctionAsync("Character", "CreateCharacter", new Dictionary<String, String> {
            {"input", _characterDetails}
        });

        // Use the result in some way
        Console.WriteLine(result);
    }
}
