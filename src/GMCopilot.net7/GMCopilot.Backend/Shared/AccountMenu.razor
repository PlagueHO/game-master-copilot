@using GMCopilot.Entities.Models

@inject AccessService AccessService
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <MudSpacer />

        @if (AccessService.IsLoaded)
        {
            <MudToolBar>
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Outlined.PeopleAlt" OnClick="@((e) => OpenAccountDrawer())" />
            </MudToolBar>

            <MudDrawer @bind-Open="@_accountDrawerOpen" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
                <MudDrawerHeader>
                    <MudIcon Icon="@Icons.Material.Outlined.PeopleOutline" />                    
                    <MudText Typo="Typo.h6" Class="px-4">Account</MudText>
                </MudDrawerHeader>
                <MudDrawerContainer>
                    <MudNavMenu>
                        <MudText Typo="Typo.body1" Class="px-4 mud-text-secondary">@AccessService.Account?.Name</MudText>
                        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@AccessService.Account?.Id</MudText>
                        <MudDivider Class="my-2" />
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" Href="MicrosoftIdentity/Account/SignOut">Logout</MudNavLink>
                    </MudNavMenu>
                </MudDrawerContainer>
            </MudDrawer>
        }
        else
        {
            <MudToolBar>
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Outlined.PeopleAlt" Disabled="true" OnClick="@((e) => OpenAccountDrawer())" />
            </MudToolBar>
        }
    </Authorized>
    <NotAuthorized>
        <MudSpacer />

        <MudToolBar>
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Outlined.PeopleAlt" Href="MicrosoftIdentity/Account/SignIn" />
        </MudToolBar>
    </NotAuthorized>
</AuthorizeView>

@code {
    bool _accountDrawerOpen = false;

    protected override void OnInitialized()
    {
        AccessService.AccountChanged += OnAccessServiceAccountChanged;
    }

    public void Dispose()
    {
        AccessService.AccountChanged -= OnAccessServiceAccountChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void OnAccessServiceAccountChanged(object? sender, Account account)
    {
        InvokeAsync(StateHasChanged);
    }

    void OpenAccountDrawer()
    {
        _accountDrawerOpen = true;
    }
}
