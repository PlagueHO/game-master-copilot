name: deploy-infrastructure

on:
  workflow_call:
    inputs:
      LOCATION:
        required: true
        type: string
      BASE_RESOURCE_NAME:
        required: true
        type: string
      RESOURCE_GROUP_NAME:
        required: true
        type: string
      APPSERVICEPLAN_CONFIGURATION:
        required: true
        type: string
      AZUREAD_INSTANCE:
        required: true
        type: string
    secrets:
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZUREAD_DOMAIN:
        required: true
      AZUREAD_TENANT_ID:
        required: true
      AZUREAD_CLIENT_ID:
        required: true
      AZUREAD_CLIENTSECRET:
        required: true
  
    outputs:
      webAppName:
        description: "The name of the deployed web app"
        value: ${{ jobs.deploy.outputs.webAppName }}
      webAppHostName:
        description: "The hostname of the deployed web app"
        value: ${{ jobs.deploy.outputs.webAppHostName }}
      webAppStagingName:
        description: "The name of the deployed web app staging slot"
        value: ${{ jobs.deploy.outputs.webAppStagingName }}
      webAppStagingHostName:
        description: "The hostname of the deployed web app staging slot"
        value: ${{ jobs.deploy.outputs.webAppStagingHostName }}
      openAiServiceEndpoint:
        description: "The endpoint of the deployed OpenAI service"
        value: ${{ jobs.deploy.outputs.openAiServiceEndpoint }}
      containerRegistryName:
        description: "The name of the deployed container registry"
        value: ${{ jobs.deploy.outputs.containerRegistryName }}

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      webAppName: ${{ steps.deploy.outputs.webAppName }}
      webAppHostName: ${{ steps.deploy.outputs.webAppHostName }}
      webAppStagingName: ${{ steps.deploy.outputs.webAppStagingName }}
      webAppStagingHostName: ${{ steps.deploy.outputs.webAppStagingHostName }}
      openAiServiceEndpoint: ${{ steps.deploy.outputs.openAiServiceEndpoint }}
      containerRegistryName: ${{ steps.deploy.outputs.containerRegistryName }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Deploy Azure resources
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: '${{ github.action_ref }}-${{ github.run_number }}'
          resourceGroupName: ${{ inputs.RESOURCE_GROUP_NAME }}
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ./armtemplate/main.json
          region: ${{ inputs.LOCATION }}
          scope: subscription
          parameters: >
            location=${{ inputs.LOCATION }}
            baseResourceName=${{ inputs.BASE_RESOURCE_NAME }}
            resourceGroupName=${{ inputs.RESOURCE_GROUP_NAME }}
            appServicePlanConfiguration=${{ inputs.APPSERVICEPLAN_CONFIGURATION }}
            azureAdInstance=${{ inputs.AZUREAD_INSTANCE }}
            azureAdDomain=${{ secrets.AZUREAD_DOMAIN }}
            azureAdTenantId=${{ secrets.AZUREAD_TENANT_ID }}
            azureAdClientId=${{ secrets.AZUREAD_CLIENT_ID }}
            azureAdClientSecret=${{ secrets.AZUREAD_CLIENTSECRET }}
